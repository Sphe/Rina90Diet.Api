/*
 * GlobContent.AdminServer.Api.Web
 *
 * General API for GlobContent stable content
 *
 * OpenAPI spec version: v1
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;

using System.Runtime.Serialization;
using Newtonsoft.Json;

namespace IO.Swagger.Models
{ 
    /// <summary>
    /// 
    /// </summary>
    [DataContract]
    public partial class BlockchainAssetDescription : IEquatable<BlockchainAssetDescription>
    { 
        /// <summary>
        /// Gets or Sets BlockchainBlockchainAssetId
        /// </summary>
        [DataMember(Name="blockchainBlockchainAssetId")]
        public string BlockchainBlockchainAssetId { get; set; }

        /// <summary>
        /// Gets or Sets KycprocessId
        /// </summary>
        [DataMember(Name="kycprocessId")]
        public string KycprocessId { get; set; }

        /// <summary>
        /// Gets or Sets BlockchainUserId
        /// </summary>
        [DataMember(Name="blockchainUserId")]
        public string BlockchainUserId { get; set; }

        /// <summary>
        /// Gets or Sets BlockchainBlockchainAssetLabel
        /// </summary>
        [DataMember(Name="blockchainBlockchainAssetLabel")]
        public string BlockchainBlockchainAssetLabel { get; set; }

        /// <summary>
        /// Gets or Sets BlockchainBlockchainAssetSymbol
        /// </summary>
        [DataMember(Name="blockchainBlockchainAssetSymbol")]
        public string BlockchainBlockchainAssetSymbol { get; set; }

        /// <summary>
        /// Gets or Sets Name
        /// </summary>
        [DataMember(Name="name")]
        public string Name { get; set; }

        /// <summary>
        /// Gets or Sets Timestamp
        /// </summary>
        [DataMember(Name="timestamp")]
        public DateTime? Timestamp { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class BlockchainAssetDescription {\n");
            sb.Append("  BlockchainBlockchainAssetId: ").Append(BlockchainBlockchainAssetId).Append("\n");
            sb.Append("  KycprocessId: ").Append(KycprocessId).Append("\n");
            sb.Append("  BlockchainUserId: ").Append(BlockchainUserId).Append("\n");
            sb.Append("  BlockchainBlockchainAssetLabel: ").Append(BlockchainBlockchainAssetLabel).Append("\n");
            sb.Append("  BlockchainBlockchainAssetSymbol: ").Append(BlockchainBlockchainAssetSymbol).Append("\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  Timestamp: ").Append(Timestamp).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            if (ReferenceEquals(null, obj)) return false;
            if (ReferenceEquals(this, obj)) return true;
            return obj.GetType() == GetType() && Equals((BlockchainAssetDescription)obj);
        }

        /// <summary>
        /// Returns true if BlockchainAssetDescription instances are equal
        /// </summary>
        /// <param name="other">Instance of BlockchainAssetDescription to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(BlockchainAssetDescription other)
        {
            if (ReferenceEquals(null, other)) return false;
            if (ReferenceEquals(this, other)) return true;

            return 
                (
                    BlockchainBlockchainAssetId == other.BlockchainBlockchainAssetId ||
                    BlockchainBlockchainAssetId != null &&
                    BlockchainBlockchainAssetId.Equals(other.BlockchainBlockchainAssetId)
                ) && 
                (
                    KycprocessId == other.KycprocessId ||
                    KycprocessId != null &&
                    KycprocessId.Equals(other.KycprocessId)
                ) && 
                (
                    BlockchainUserId == other.BlockchainUserId ||
                    BlockchainUserId != null &&
                    BlockchainUserId.Equals(other.BlockchainUserId)
                ) && 
                (
                    BlockchainBlockchainAssetLabel == other.BlockchainBlockchainAssetLabel ||
                    BlockchainBlockchainAssetLabel != null &&
                    BlockchainBlockchainAssetLabel.Equals(other.BlockchainBlockchainAssetLabel)
                ) && 
                (
                    BlockchainBlockchainAssetSymbol == other.BlockchainBlockchainAssetSymbol ||
                    BlockchainBlockchainAssetSymbol != null &&
                    BlockchainBlockchainAssetSymbol.Equals(other.BlockchainBlockchainAssetSymbol)
                ) && 
                (
                    Name == other.Name ||
                    Name != null &&
                    Name.Equals(other.Name)
                ) && 
                (
                    Timestamp == other.Timestamp ||
                    Timestamp != null &&
                    Timestamp.Equals(other.Timestamp)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                var hashCode = 41;
                // Suitable nullity checks etc, of course :)
                    if (BlockchainBlockchainAssetId != null)
                    hashCode = hashCode * 59 + BlockchainBlockchainAssetId.GetHashCode();
                    if (KycprocessId != null)
                    hashCode = hashCode * 59 + KycprocessId.GetHashCode();
                    if (BlockchainUserId != null)
                    hashCode = hashCode * 59 + BlockchainUserId.GetHashCode();
                    if (BlockchainBlockchainAssetLabel != null)
                    hashCode = hashCode * 59 + BlockchainBlockchainAssetLabel.GetHashCode();
                    if (BlockchainBlockchainAssetSymbol != null)
                    hashCode = hashCode * 59 + BlockchainBlockchainAssetSymbol.GetHashCode();
                    if (Name != null)
                    hashCode = hashCode * 59 + Name.GetHashCode();
                    if (Timestamp != null)
                    hashCode = hashCode * 59 + Timestamp.GetHashCode();
                return hashCode;
            }
        }

        #region Operators
        #pragma warning disable 1591

        public static bool operator ==(BlockchainAssetDescription left, BlockchainAssetDescription right)
        {
            return Equals(left, right);
        }

        public static bool operator !=(BlockchainAssetDescription left, BlockchainAssetDescription right)
        {
            return !Equals(left, right);
        }

        #pragma warning restore 1591
        #endregion Operators
    }
}
