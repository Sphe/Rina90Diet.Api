/*
 * GlobContent.AdminServer.Api.Web
 *
 * General API for GlobContent stable content
 *
 * OpenAPI spec version: v1
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;

using System.Runtime.Serialization;
using Newtonsoft.Json;

namespace IO.Swagger.Models
{ 
    /// <summary>
    /// 
    /// </summary>
    [DataContract]
    public partial class CustomerProfileList : IEquatable<CustomerProfileList>
    { 
        /// <summary>
        /// Gets or Sets CustomerId
        /// </summary>
        [DataMember(Name="customerId")]
        public string CustomerId { get; set; }

        /// <summary>
        /// Gets or Sets Salutation
        /// </summary>
        [DataMember(Name="salutation")]
        public string Salutation { get; set; }

        /// <summary>
        /// Gets or Sets Firstlogin
        /// </summary>
        [DataMember(Name="firstlogin")]
        public DateTime? Firstlogin { get; set; }

        /// <summary>
        /// Gets or Sets Lastlogin
        /// </summary>
        [DataMember(Name="lastlogin")]
        public DateTime? Lastlogin { get; set; }

        /// <summary>
        /// Gets or Sets RegistrationDate
        /// </summary>
        [DataMember(Name="registrationDate")]
        public DateTime? RegistrationDate { get; set; }

        /// <summary>
        /// Gets or Sets FirstName
        /// </summary>
        [DataMember(Name="firstName")]
        public string FirstName { get; set; }

        /// <summary>
        /// Gets or Sets LastName
        /// </summary>
        [DataMember(Name="lastName")]
        public string LastName { get; set; }

        /// <summary>
        /// Gets or Sets Phone
        /// </summary>
        [DataMember(Name="phone")]
        public string Phone { get; set; }

        /// <summary>
        /// Gets or Sets Email
        /// </summary>
        [DataMember(Name="email")]
        public string Email { get; set; }

        /// <summary>
        /// Gets or Sets WalletSerialized
        /// </summary>
        [DataMember(Name="walletSerialized")]
        public string WalletSerialized { get; set; }

        /// <summary>
        /// Gets or Sets Active
        /// </summary>
        [DataMember(Name="active")]
        public bool? Active { get; set; }

        /// <summary>
        /// Gets or Sets BirthDate
        /// </summary>
        [DataMember(Name="birthDate")]
        public DateTime? BirthDate { get; set; }

        /// <summary>
        /// Gets or Sets MobileLanguage
        /// </summary>
        [DataMember(Name="mobileLanguage")]
        public string MobileLanguage { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class CustomerProfileList {\n");
            sb.Append("  CustomerId: ").Append(CustomerId).Append("\n");
            sb.Append("  Salutation: ").Append(Salutation).Append("\n");
            sb.Append("  Firstlogin: ").Append(Firstlogin).Append("\n");
            sb.Append("  Lastlogin: ").Append(Lastlogin).Append("\n");
            sb.Append("  RegistrationDate: ").Append(RegistrationDate).Append("\n");
            sb.Append("  FirstName: ").Append(FirstName).Append("\n");
            sb.Append("  LastName: ").Append(LastName).Append("\n");
            sb.Append("  Phone: ").Append(Phone).Append("\n");
            sb.Append("  Email: ").Append(Email).Append("\n");
            sb.Append("  WalletSerialized: ").Append(WalletSerialized).Append("\n");
            sb.Append("  Active: ").Append(Active).Append("\n");
            sb.Append("  BirthDate: ").Append(BirthDate).Append("\n");
            sb.Append("  MobileLanguage: ").Append(MobileLanguage).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            if (ReferenceEquals(null, obj)) return false;
            if (ReferenceEquals(this, obj)) return true;
            return obj.GetType() == GetType() && Equals((CustomerProfileList)obj);
        }

        /// <summary>
        /// Returns true if CustomerProfileList instances are equal
        /// </summary>
        /// <param name="other">Instance of CustomerProfileList to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(CustomerProfileList other)
        {
            if (ReferenceEquals(null, other)) return false;
            if (ReferenceEquals(this, other)) return true;

            return 
                (
                    CustomerId == other.CustomerId ||
                    CustomerId != null &&
                    CustomerId.Equals(other.CustomerId)
                ) && 
                (
                    Salutation == other.Salutation ||
                    Salutation != null &&
                    Salutation.Equals(other.Salutation)
                ) && 
                (
                    Firstlogin == other.Firstlogin ||
                    Firstlogin != null &&
                    Firstlogin.Equals(other.Firstlogin)
                ) && 
                (
                    Lastlogin == other.Lastlogin ||
                    Lastlogin != null &&
                    Lastlogin.Equals(other.Lastlogin)
                ) && 
                (
                    RegistrationDate == other.RegistrationDate ||
                    RegistrationDate != null &&
                    RegistrationDate.Equals(other.RegistrationDate)
                ) && 
                (
                    FirstName == other.FirstName ||
                    FirstName != null &&
                    FirstName.Equals(other.FirstName)
                ) && 
                (
                    LastName == other.LastName ||
                    LastName != null &&
                    LastName.Equals(other.LastName)
                ) && 
                (
                    Phone == other.Phone ||
                    Phone != null &&
                    Phone.Equals(other.Phone)
                ) && 
                (
                    Email == other.Email ||
                    Email != null &&
                    Email.Equals(other.Email)
                ) && 
                (
                    WalletSerialized == other.WalletSerialized ||
                    WalletSerialized != null &&
                    WalletSerialized.Equals(other.WalletSerialized)
                ) && 
                (
                    Active == other.Active ||
                    Active != null &&
                    Active.Equals(other.Active)
                ) && 
                (
                    BirthDate == other.BirthDate ||
                    BirthDate != null &&
                    BirthDate.Equals(other.BirthDate)
                ) && 
                (
                    MobileLanguage == other.MobileLanguage ||
                    MobileLanguage != null &&
                    MobileLanguage.Equals(other.MobileLanguage)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                var hashCode = 41;
                // Suitable nullity checks etc, of course :)
                    if (CustomerId != null)
                    hashCode = hashCode * 59 + CustomerId.GetHashCode();
                    if (Salutation != null)
                    hashCode = hashCode * 59 + Salutation.GetHashCode();
                    if (Firstlogin != null)
                    hashCode = hashCode * 59 + Firstlogin.GetHashCode();
                    if (Lastlogin != null)
                    hashCode = hashCode * 59 + Lastlogin.GetHashCode();
                    if (RegistrationDate != null)
                    hashCode = hashCode * 59 + RegistrationDate.GetHashCode();
                    if (FirstName != null)
                    hashCode = hashCode * 59 + FirstName.GetHashCode();
                    if (LastName != null)
                    hashCode = hashCode * 59 + LastName.GetHashCode();
                    if (Phone != null)
                    hashCode = hashCode * 59 + Phone.GetHashCode();
                    if (Email != null)
                    hashCode = hashCode * 59 + Email.GetHashCode();
                    if (WalletSerialized != null)
                    hashCode = hashCode * 59 + WalletSerialized.GetHashCode();
                    if (Active != null)
                    hashCode = hashCode * 59 + Active.GetHashCode();
                    if (BirthDate != null)
                    hashCode = hashCode * 59 + BirthDate.GetHashCode();
                    if (MobileLanguage != null)
                    hashCode = hashCode * 59 + MobileLanguage.GetHashCode();
                return hashCode;
            }
        }

        #region Operators
        #pragma warning disable 1591

        public static bool operator ==(CustomerProfileList left, CustomerProfileList right)
        {
            return Equals(left, right);
        }

        public static bool operator !=(CustomerProfileList left, CustomerProfileList right)
        {
            return !Equals(left, right);
        }

        #pragma warning restore 1591
        #endregion Operators
    }
}
