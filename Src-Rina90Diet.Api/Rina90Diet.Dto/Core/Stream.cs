/*
 * GlobContent.AdminServer.Api.Web
 *
 * General API for GlobContent stable content
 *
 * OpenAPI spec version: v1
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;

using System.Runtime.Serialization;
using Newtonsoft.Json;

namespace IO.Swagger.Models
{ 
    /// <summary>
    /// 
    /// </summary>
    [DataContract]
    public partial class Stream : IEquatable<Stream>
    { 
        /// <summary>
        /// Gets or Sets CanRead
        /// </summary>
        [DataMember(Name="canRead")]
        public bool? CanRead { get; private set; }

        /// <summary>
        /// Gets or Sets CanSeek
        /// </summary>
        [DataMember(Name="canSeek")]
        public bool? CanSeek { get; private set; }

        /// <summary>
        /// Gets or Sets CanTimeout
        /// </summary>
        [DataMember(Name="canTimeout")]
        public bool? CanTimeout { get; private set; }

        /// <summary>
        /// Gets or Sets CanWrite
        /// </summary>
        [DataMember(Name="canWrite")]
        public bool? CanWrite { get; private set; }

        /// <summary>
        /// Gets or Sets Length
        /// </summary>
        [DataMember(Name="length")]
        public long? Length { get; private set; }

        /// <summary>
        /// Gets or Sets Position
        /// </summary>
        [DataMember(Name="position")]
        public long? Position { get; set; }

        /// <summary>
        /// Gets or Sets ReadTimeout
        /// </summary>
        [DataMember(Name="readTimeout")]
        public int? ReadTimeout { get; set; }

        /// <summary>
        /// Gets or Sets WriteTimeout
        /// </summary>
        [DataMember(Name="writeTimeout")]
        public int? WriteTimeout { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class Stream {\n");
            sb.Append("  CanRead: ").Append(CanRead).Append("\n");
            sb.Append("  CanSeek: ").Append(CanSeek).Append("\n");
            sb.Append("  CanTimeout: ").Append(CanTimeout).Append("\n");
            sb.Append("  CanWrite: ").Append(CanWrite).Append("\n");
            sb.Append("  Length: ").Append(Length).Append("\n");
            sb.Append("  Position: ").Append(Position).Append("\n");
            sb.Append("  ReadTimeout: ").Append(ReadTimeout).Append("\n");
            sb.Append("  WriteTimeout: ").Append(WriteTimeout).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            if (ReferenceEquals(null, obj)) return false;
            if (ReferenceEquals(this, obj)) return true;
            return obj.GetType() == GetType() && Equals((Stream)obj);
        }

        /// <summary>
        /// Returns true if Stream instances are equal
        /// </summary>
        /// <param name="other">Instance of Stream to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(Stream other)
        {
            if (ReferenceEquals(null, other)) return false;
            if (ReferenceEquals(this, other)) return true;

            return 
                (
                    CanRead == other.CanRead ||
                    CanRead != null &&
                    CanRead.Equals(other.CanRead)
                ) && 
                (
                    CanSeek == other.CanSeek ||
                    CanSeek != null &&
                    CanSeek.Equals(other.CanSeek)
                ) && 
                (
                    CanTimeout == other.CanTimeout ||
                    CanTimeout != null &&
                    CanTimeout.Equals(other.CanTimeout)
                ) && 
                (
                    CanWrite == other.CanWrite ||
                    CanWrite != null &&
                    CanWrite.Equals(other.CanWrite)
                ) && 
                (
                    Length == other.Length ||
                    Length != null &&
                    Length.Equals(other.Length)
                ) && 
                (
                    Position == other.Position ||
                    Position != null &&
                    Position.Equals(other.Position)
                ) && 
                (
                    ReadTimeout == other.ReadTimeout ||
                    ReadTimeout != null &&
                    ReadTimeout.Equals(other.ReadTimeout)
                ) && 
                (
                    WriteTimeout == other.WriteTimeout ||
                    WriteTimeout != null &&
                    WriteTimeout.Equals(other.WriteTimeout)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                var hashCode = 41;
                // Suitable nullity checks etc, of course :)
                    if (CanRead != null)
                    hashCode = hashCode * 59 + CanRead.GetHashCode();
                    if (CanSeek != null)
                    hashCode = hashCode * 59 + CanSeek.GetHashCode();
                    if (CanTimeout != null)
                    hashCode = hashCode * 59 + CanTimeout.GetHashCode();
                    if (CanWrite != null)
                    hashCode = hashCode * 59 + CanWrite.GetHashCode();
                    if (Length != null)
                    hashCode = hashCode * 59 + Length.GetHashCode();
                    if (Position != null)
                    hashCode = hashCode * 59 + Position.GetHashCode();
                    if (ReadTimeout != null)
                    hashCode = hashCode * 59 + ReadTimeout.GetHashCode();
                    if (WriteTimeout != null)
                    hashCode = hashCode * 59 + WriteTimeout.GetHashCode();
                return hashCode;
            }
        }

        #region Operators
        #pragma warning disable 1591

        public static bool operator ==(Stream left, Stream right)
        {
            return Equals(left, right);
        }

        public static bool operator !=(Stream left, Stream right)
        {
            return !Equals(left, right);
        }

        #pragma warning restore 1591
        #endregion Operators
    }
}
