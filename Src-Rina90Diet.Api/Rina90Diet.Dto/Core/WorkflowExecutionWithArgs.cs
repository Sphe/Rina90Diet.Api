/*
 * GlobContent.AdminServer.Api.Web
 *
 * General API for GlobContent stable content
 *
 * OpenAPI spec version: v1
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;

using System.Runtime.Serialization;
using Newtonsoft.Json;

namespace IO.Swagger.Models
{ 
    /// <summary>
    /// 
    /// </summary>
    [DataContract]
    public partial class WorkflowExecutionWithArgs : IEquatable<WorkflowExecutionWithArgs>
    { 
        /// <summary>
        /// Gets or Sets WorkflowId
        /// </summary>
        [DataMember(Name="workflowId")]
        public string WorkflowId { get; set; }

        /// <summary>
        /// Gets or Sets LycJsContent
        /// </summary>
        [DataMember(Name="lycJsContent")]
        public string LycJsContent { get; set; }

        /// <summary>
        /// Gets or Sets Timeout
        /// </summary>
        [DataMember(Name="timeout")]
        public int? Timeout { get; set; }

        /// <summary>
        /// Gets or Sets DicoArgs
        /// </summary>
        [DataMember(Name="dicoArgs")]
        public Dictionary<string, Object> DicoArgs { get; set; }

        /// <summary>
        /// Gets or Sets Debug
        /// </summary>
        [DataMember(Name="debug")]
        public bool? Debug { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class WorkflowExecutionWithArgs {\n");
            sb.Append("  WorkflowId: ").Append(WorkflowId).Append("\n");
            sb.Append("  LycJsContent: ").Append(LycJsContent).Append("\n");
            sb.Append("  Timeout: ").Append(Timeout).Append("\n");
            sb.Append("  DicoArgs: ").Append(DicoArgs).Append("\n");
            sb.Append("  Debug: ").Append(Debug).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            if (ReferenceEquals(null, obj)) return false;
            if (ReferenceEquals(this, obj)) return true;
            return obj.GetType() == GetType() && Equals((WorkflowExecutionWithArgs)obj);
        }

        /// <summary>
        /// Returns true if WorkflowExecutionWithArgs instances are equal
        /// </summary>
        /// <param name="other">Instance of WorkflowExecutionWithArgs to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(WorkflowExecutionWithArgs other)
        {
            if (ReferenceEquals(null, other)) return false;
            if (ReferenceEquals(this, other)) return true;

            return 
                (
                    WorkflowId == other.WorkflowId ||
                    WorkflowId != null &&
                    WorkflowId.Equals(other.WorkflowId)
                ) && 
                (
                    LycJsContent == other.LycJsContent ||
                    LycJsContent != null &&
                    LycJsContent.Equals(other.LycJsContent)
                ) && 
                (
                    Timeout == other.Timeout ||
                    Timeout != null &&
                    Timeout.Equals(other.Timeout)
                ) && 
                (
                    DicoArgs == other.DicoArgs ||
                    DicoArgs != null &&
                    DicoArgs.SequenceEqual(other.DicoArgs)
                ) && 
                (
                    Debug == other.Debug ||
                    Debug != null &&
                    Debug.Equals(other.Debug)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                var hashCode = 41;
                // Suitable nullity checks etc, of course :)
                    if (WorkflowId != null)
                    hashCode = hashCode * 59 + WorkflowId.GetHashCode();
                    if (LycJsContent != null)
                    hashCode = hashCode * 59 + LycJsContent.GetHashCode();
                    if (Timeout != null)
                    hashCode = hashCode * 59 + Timeout.GetHashCode();
                    if (DicoArgs != null)
                    hashCode = hashCode * 59 + DicoArgs.GetHashCode();
                    if (Debug != null)
                    hashCode = hashCode * 59 + Debug.GetHashCode();
                return hashCode;
            }
        }

        #region Operators
        #pragma warning disable 1591

        public static bool operator ==(WorkflowExecutionWithArgs left, WorkflowExecutionWithArgs right)
        {
            return Equals(left, right);
        }

        public static bool operator !=(WorkflowExecutionWithArgs left, WorkflowExecutionWithArgs right)
        {
            return !Equals(left, right);
        }

        #pragma warning restore 1591
        #endregion Operators
    }
}
