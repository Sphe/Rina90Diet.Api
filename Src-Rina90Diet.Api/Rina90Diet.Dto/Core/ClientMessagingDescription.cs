/*
 * GlobContent.AdminServer.Api.Web
 *
 * General API for GlobContent stable content
 *
 * OpenAPI spec version: v1
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;

using System.Runtime.Serialization;
using Newtonsoft.Json;

namespace IO.Swagger.Models
{ 
    /// <summary>
    /// 
    /// </summary>
    [DataContract]
    public partial class ClientMessagingDescription : IEquatable<ClientMessagingDescription>
    { 
        /// <summary>
        /// Gets or Sets ClientmessagingId
        /// </summary>
        [DataMember(Name="clientmessagingId")]
        public string ClientmessagingId { get; set; }

        /// <summary>
        /// Gets or Sets RedemptionId
        /// </summary>
        [DataMember(Name="redemptionId")]
        public string RedemptionId { get; set; }

        /// <summary>
        /// Gets or Sets ClientmessagingedAmount
        /// </summary>
        [DataMember(Name="clientmessagingedAmount")]
        public double? ClientmessagingedAmount { get; set; }

        /// <summary>
        /// Gets or Sets DebitedCoins
        /// </summary>
        [DataMember(Name="debitedCoins")]
        public double? DebitedCoins { get; set; }

        /// <summary>
        /// Gets or Sets Timestamp
        /// </summary>
        [DataMember(Name="timestamp")]
        public DateTime? Timestamp { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class ClientMessagingDescription {\n");
            sb.Append("  ClientmessagingId: ").Append(ClientmessagingId).Append("\n");
            sb.Append("  RedemptionId: ").Append(RedemptionId).Append("\n");
            sb.Append("  ClientmessagingedAmount: ").Append(ClientmessagingedAmount).Append("\n");
            sb.Append("  DebitedCoins: ").Append(DebitedCoins).Append("\n");
            sb.Append("  Timestamp: ").Append(Timestamp).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            if (ReferenceEquals(null, obj)) return false;
            if (ReferenceEquals(this, obj)) return true;
            return obj.GetType() == GetType() && Equals((ClientMessagingDescription)obj);
        }

        /// <summary>
        /// Returns true if ClientMessagingDescription instances are equal
        /// </summary>
        /// <param name="other">Instance of ClientMessagingDescription to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(ClientMessagingDescription other)
        {
            if (ReferenceEquals(null, other)) return false;
            if (ReferenceEquals(this, other)) return true;

            return 
                (
                    ClientmessagingId == other.ClientmessagingId ||
                    ClientmessagingId != null &&
                    ClientmessagingId.Equals(other.ClientmessagingId)
                ) && 
                (
                    RedemptionId == other.RedemptionId ||
                    RedemptionId != null &&
                    RedemptionId.Equals(other.RedemptionId)
                ) && 
                (
                    ClientmessagingedAmount == other.ClientmessagingedAmount ||
                    ClientmessagingedAmount != null &&
                    ClientmessagingedAmount.Equals(other.ClientmessagingedAmount)
                ) && 
                (
                    DebitedCoins == other.DebitedCoins ||
                    DebitedCoins != null &&
                    DebitedCoins.Equals(other.DebitedCoins)
                ) && 
                (
                    Timestamp == other.Timestamp ||
                    Timestamp != null &&
                    Timestamp.Equals(other.Timestamp)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                var hashCode = 41;
                // Suitable nullity checks etc, of course :)
                    if (ClientmessagingId != null)
                    hashCode = hashCode * 59 + ClientmessagingId.GetHashCode();
                    if (RedemptionId != null)
                    hashCode = hashCode * 59 + RedemptionId.GetHashCode();
                    if (ClientmessagingedAmount != null)
                    hashCode = hashCode * 59 + ClientmessagingedAmount.GetHashCode();
                    if (DebitedCoins != null)
                    hashCode = hashCode * 59 + DebitedCoins.GetHashCode();
                    if (Timestamp != null)
                    hashCode = hashCode * 59 + Timestamp.GetHashCode();
                return hashCode;
            }
        }

        #region Operators
        #pragma warning disable 1591

        public static bool operator ==(ClientMessagingDescription left, ClientMessagingDescription right)
        {
            return Equals(left, right);
        }

        public static bool operator !=(ClientMessagingDescription left, ClientMessagingDescription right)
        {
            return !Equals(left, right);
        }

        #pragma warning restore 1591
        #endregion Operators
    }
}
