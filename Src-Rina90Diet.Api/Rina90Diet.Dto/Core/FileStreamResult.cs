/*
 * GlobContent.AdminServer.Api.Web
 *
 * General API for GlobContent stable content
 *
 * OpenAPI spec version: v1
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;

using System.Runtime.Serialization;
using Newtonsoft.Json;

namespace IO.Swagger.Models
{ 
    /// <summary>
    /// 
    /// </summary>
    [DataContract]
    public partial class FileStreamResult : IEquatable<FileStreamResult>
    { 
        /// <summary>
        /// Gets or Sets FileStream
        /// </summary>
        [DataMember(Name="fileStream")]
        public Stream FileStream { get; set; }

        /// <summary>
        /// Gets or Sets ContentType
        /// </summary>
        [DataMember(Name="contentType")]
        public string ContentType { get; private set; }

        /// <summary>
        /// Gets or Sets FileDownloadName
        /// </summary>
        [DataMember(Name="fileDownloadName")]
        public string FileDownloadName { get; set; }

        /// <summary>
        /// Gets or Sets LastModified
        /// </summary>
        [DataMember(Name="lastModified")]
        public DateTime? LastModified { get; set; }

        /// <summary>
        /// Gets or Sets EntityTag
        /// </summary>
        [DataMember(Name="entityTag")]
        public EntityTagHeaderValue EntityTag { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class FileStreamResult {\n");
            sb.Append("  FileStream: ").Append(FileStream).Append("\n");
            sb.Append("  ContentType: ").Append(ContentType).Append("\n");
            sb.Append("  FileDownloadName: ").Append(FileDownloadName).Append("\n");
            sb.Append("  LastModified: ").Append(LastModified).Append("\n");
            sb.Append("  EntityTag: ").Append(EntityTag).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            if (ReferenceEquals(null, obj)) return false;
            if (ReferenceEquals(this, obj)) return true;
            return obj.GetType() == GetType() && Equals((FileStreamResult)obj);
        }

        /// <summary>
        /// Returns true if FileStreamResult instances are equal
        /// </summary>
        /// <param name="other">Instance of FileStreamResult to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(FileStreamResult other)
        {
            if (ReferenceEquals(null, other)) return false;
            if (ReferenceEquals(this, other)) return true;

            return 
                (
                    FileStream == other.FileStream ||
                    FileStream != null &&
                    FileStream.Equals(other.FileStream)
                ) && 
                (
                    ContentType == other.ContentType ||
                    ContentType != null &&
                    ContentType.Equals(other.ContentType)
                ) && 
                (
                    FileDownloadName == other.FileDownloadName ||
                    FileDownloadName != null &&
                    FileDownloadName.Equals(other.FileDownloadName)
                ) && 
                (
                    LastModified == other.LastModified ||
                    LastModified != null &&
                    LastModified.Equals(other.LastModified)
                ) && 
                (
                    EntityTag == other.EntityTag ||
                    EntityTag != null &&
                    EntityTag.Equals(other.EntityTag)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                var hashCode = 41;
                // Suitable nullity checks etc, of course :)
                    if (FileStream != null)
                    hashCode = hashCode * 59 + FileStream.GetHashCode();
                    if (ContentType != null)
                    hashCode = hashCode * 59 + ContentType.GetHashCode();
                    if (FileDownloadName != null)
                    hashCode = hashCode * 59 + FileDownloadName.GetHashCode();
                    if (LastModified != null)
                    hashCode = hashCode * 59 + LastModified.GetHashCode();
                    if (EntityTag != null)
                    hashCode = hashCode * 59 + EntityTag.GetHashCode();
                return hashCode;
            }
        }

        #region Operators
        #pragma warning disable 1591

        public static bool operator ==(FileStreamResult left, FileStreamResult right)
        {
            return Equals(left, right);
        }

        public static bool operator !=(FileStreamResult left, FileStreamResult right)
        {
            return !Equals(left, right);
        }

        #pragma warning restore 1591
        #endregion Operators
    }
}
