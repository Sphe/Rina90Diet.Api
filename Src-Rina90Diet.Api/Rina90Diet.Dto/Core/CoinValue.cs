/*
 * GlobContent.AdminServer.Api.Web
 *
 * General API for GlobContent stable content
 *
 * OpenAPI spec version: v1
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;

using System.Runtime.Serialization;
using Newtonsoft.Json;

namespace IO.Swagger.Models
{ 
    /// <summary>
    /// 
    /// </summary>
    [DataContract]
    public partial class CoinValue : IEquatable<CoinValue>
    { 
        /// <summary>
        /// Gets or Sets ContentId
        /// </summary>
        [DataMember(Name="contentId")]
        public string ContentId { get; set; }

        /// <summary>
        /// Gets or Sets CoinBalance
        /// </summary>
        [DataMember(Name="coinBalance")]
        public double? CoinBalance { get; set; }

        /// <summary>
        /// Gets or Sets BlockchainBlockchainAssetSymbol
        /// </summary>
        [DataMember(Name="blockchainBlockchainAssetSymbol")]
        public string BlockchainBlockchainAssetSymbol { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class CoinValue {\n");
            sb.Append("  ContentId: ").Append(ContentId).Append("\n");
            sb.Append("  CoinBalance: ").Append(CoinBalance).Append("\n");
            sb.Append("  BlockchainBlockchainAssetSymbol: ").Append(BlockchainBlockchainAssetSymbol).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            if (ReferenceEquals(null, obj)) return false;
            if (ReferenceEquals(this, obj)) return true;
            return obj.GetType() == GetType() && Equals((CoinValue)obj);
        }

        /// <summary>
        /// Returns true if CoinValue instances are equal
        /// </summary>
        /// <param name="other">Instance of CoinValue to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(CoinValue other)
        {
            if (ReferenceEquals(null, other)) return false;
            if (ReferenceEquals(this, other)) return true;

            return 
                (
                    ContentId == other.ContentId ||
                    ContentId != null &&
                    ContentId.Equals(other.ContentId)
                ) && 
                (
                    CoinBalance == other.CoinBalance ||
                    CoinBalance != null &&
                    CoinBalance.Equals(other.CoinBalance)
                ) && 
                (
                    BlockchainBlockchainAssetSymbol == other.BlockchainBlockchainAssetSymbol ||
                    BlockchainBlockchainAssetSymbol != null &&
                    BlockchainBlockchainAssetSymbol.Equals(other.BlockchainBlockchainAssetSymbol)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                var hashCode = 41;
                // Suitable nullity checks etc, of course :)
                    if (ContentId != null)
                    hashCode = hashCode * 59 + ContentId.GetHashCode();
                    if (CoinBalance != null)
                    hashCode = hashCode * 59 + CoinBalance.GetHashCode();
                    if (BlockchainBlockchainAssetSymbol != null)
                    hashCode = hashCode * 59 + BlockchainBlockchainAssetSymbol.GetHashCode();
                return hashCode;
            }
        }

        #region Operators
        #pragma warning disable 1591

        public static bool operator ==(CoinValue left, CoinValue right)
        {
            return Equals(left, right);
        }

        public static bool operator !=(CoinValue left, CoinValue right)
        {
            return !Equals(left, right);
        }

        #pragma warning restore 1591
        #endregion Operators
    }
}
