/*
 * GlobContent.AdminServer.Api.Web
 *
 * General API for GlobContent stable content
 *
 * OpenAPI spec version: v1
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;

using System.Runtime.Serialization;
using Newtonsoft.Json;

namespace IO.Swagger.Models
{ 
    /// <summary>
    /// 
    /// </summary>
    [DataContract]
    public partial class ContentDescription : IEquatable<ContentDescription>
    { 
        /// <summary>
        /// Gets or Sets ContentId
        /// </summary>
        [DataMember(Name="contentId")]
        public string ContentId { get; set; }

        /// <summary>
        /// Gets or Sets KycprocessId
        /// </summary>
        [DataMember(Name="kycprocessId")]
        public string KycprocessId { get; set; }

        /// <summary>
        /// Gets or Sets KycprocessName
        /// </summary>
        [DataMember(Name="kycprocessName")]
        public string KycprocessName { get; set; }

        /// <summary>
        /// Gets or Sets ContentName
        /// </summary>
        [DataMember(Name="contentName")]
        public string ContentName { get; set; }

        /// <summary>
        /// Gets or Sets ContentLabel
        /// </summary>
        [DataMember(Name="contentLabel")]
        public string ContentLabel { get; set; }

        /// <summary>
        /// Gets or Sets ContentSymbol
        /// </summary>
        [DataMember(Name="contentSymbol")]
        public string ContentSymbol { get; set; }

        /// <summary>
        /// Gets or Sets CreatedOn
        /// </summary>
        [DataMember(Name="createdOn")]
        public DateTime? CreatedOn { get; set; }

        /// <summary>
        /// Gets or Sets ModifiedOn
        /// </summary>
        [DataMember(Name="modifiedOn")]
        public DateTime? ModifiedOn { get; set; }

        /// <summary>
        /// Gets or Sets CreatedBy
        /// </summary>
        [DataMember(Name="createdBy")]
        public string CreatedBy { get; set; }

        /// <summary>
        /// Gets or Sets ModifiedBy
        /// </summary>
        [DataMember(Name="modifiedBy")]
        public string ModifiedBy { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class ContentDescription {\n");
            sb.Append("  ContentId: ").Append(ContentId).Append("\n");
            sb.Append("  KycprocessId: ").Append(KycprocessId).Append("\n");
            sb.Append("  KycprocessName: ").Append(KycprocessName).Append("\n");
            sb.Append("  ContentName: ").Append(ContentName).Append("\n");
            sb.Append("  ContentLabel: ").Append(ContentLabel).Append("\n");
            sb.Append("  ContentSymbol: ").Append(ContentSymbol).Append("\n");
            sb.Append("  CreatedOn: ").Append(CreatedOn).Append("\n");
            sb.Append("  ModifiedOn: ").Append(ModifiedOn).Append("\n");
            sb.Append("  CreatedBy: ").Append(CreatedBy).Append("\n");
            sb.Append("  ModifiedBy: ").Append(ModifiedBy).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            if (ReferenceEquals(null, obj)) return false;
            if (ReferenceEquals(this, obj)) return true;
            return obj.GetType() == GetType() && Equals((ContentDescription)obj);
        }

        /// <summary>
        /// Returns true if ContentDescription instances are equal
        /// </summary>
        /// <param name="other">Instance of ContentDescription to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(ContentDescription other)
        {
            if (ReferenceEquals(null, other)) return false;
            if (ReferenceEquals(this, other)) return true;

            return 
                (
                    ContentId == other.ContentId ||
                    ContentId != null &&
                    ContentId.Equals(other.ContentId)
                ) && 
                (
                    KycprocessId == other.KycprocessId ||
                    KycprocessId != null &&
                    KycprocessId.Equals(other.KycprocessId)
                ) && 
                (
                    KycprocessName == other.KycprocessName ||
                    KycprocessName != null &&
                    KycprocessName.Equals(other.KycprocessName)
                ) && 
                (
                    ContentName == other.ContentName ||
                    ContentName != null &&
                    ContentName.Equals(other.ContentName)
                ) && 
                (
                    ContentLabel == other.ContentLabel ||
                    ContentLabel != null &&
                    ContentLabel.Equals(other.ContentLabel)
                ) && 
                (
                    ContentSymbol == other.ContentSymbol ||
                    ContentSymbol != null &&
                    ContentSymbol.Equals(other.ContentSymbol)
                ) && 
                (
                    CreatedOn == other.CreatedOn ||
                    CreatedOn != null &&
                    CreatedOn.Equals(other.CreatedOn)
                ) && 
                (
                    ModifiedOn == other.ModifiedOn ||
                    ModifiedOn != null &&
                    ModifiedOn.Equals(other.ModifiedOn)
                ) && 
                (
                    CreatedBy == other.CreatedBy ||
                    CreatedBy != null &&
                    CreatedBy.Equals(other.CreatedBy)
                ) && 
                (
                    ModifiedBy == other.ModifiedBy ||
                    ModifiedBy != null &&
                    ModifiedBy.Equals(other.ModifiedBy)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                var hashCode = 41;
                // Suitable nullity checks etc, of course :)
                    if (ContentId != null)
                    hashCode = hashCode * 59 + ContentId.GetHashCode();
                    if (KycprocessId != null)
                    hashCode = hashCode * 59 + KycprocessId.GetHashCode();
                    if (KycprocessName != null)
                    hashCode = hashCode * 59 + KycprocessName.GetHashCode();
                    if (ContentName != null)
                    hashCode = hashCode * 59 + ContentName.GetHashCode();
                    if (ContentLabel != null)
                    hashCode = hashCode * 59 + ContentLabel.GetHashCode();
                    if (ContentSymbol != null)
                    hashCode = hashCode * 59 + ContentSymbol.GetHashCode();
                    if (CreatedOn != null)
                    hashCode = hashCode * 59 + CreatedOn.GetHashCode();
                    if (ModifiedOn != null)
                    hashCode = hashCode * 59 + ModifiedOn.GetHashCode();
                    if (CreatedBy != null)
                    hashCode = hashCode * 59 + CreatedBy.GetHashCode();
                    if (ModifiedBy != null)
                    hashCode = hashCode * 59 + ModifiedBy.GetHashCode();
                return hashCode;
            }
        }

        #region Operators
        #pragma warning disable 1591

        public static bool operator ==(ContentDescription left, ContentDescription right)
        {
            return Equals(left, right);
        }

        public static bool operator !=(ContentDescription left, ContentDescription right)
        {
            return !Equals(left, right);
        }

        #pragma warning restore 1591
        #endregion Operators
    }
}
