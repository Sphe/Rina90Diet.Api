/*
 * GlobContent.AdminServer.Api.Web
 *
 * General API for GlobContent stable content
 *
 * OpenAPI spec version: v1
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;

using System.Runtime.Serialization;
using Newtonsoft.Json;

namespace IO.Swagger.Models
{ 
    /// <summary>
    /// 
    /// </summary>
    [DataContract]
    public partial class CoinBalanceKycProcess : IEquatable<CoinBalanceKycProcess>
    { 
        /// <summary>
        /// Gets or Sets CoinBalanceKycProcessId
        /// </summary>
        [DataMember(Name="coinBalanceKycProcessId")]
        public string CoinBalanceKycProcessId { get; set; }

        /// <summary>
        /// Gets or Sets CustomerId
        /// </summary>
        [DataMember(Name="customerId")]
        public string CustomerId { get; set; }

        /// <summary>
        /// Gets or Sets ContentId
        /// </summary>
        [DataMember(Name="contentId")]
        public string ContentId { get; set; }

        /// <summary>
        /// Gets or Sets BalanceAvailable
        /// </summary>
        [DataMember(Name="balanceAvailable")]
        public double? BalanceAvailable { get; set; }

        /// <summary>
        /// Gets or Sets CreditAmount
        /// </summary>
        [DataMember(Name="creditAmount")]
        public double? CreditAmount { get; set; }

        /// <summary>
        /// Gets or Sets DebitAmount
        /// </summary>
        [DataMember(Name="debitAmount")]
        public double? DebitAmount { get; set; }

        /// <summary>
        /// Gets or Sets CreatedOn
        /// </summary>
        [DataMember(Name="createdOn")]
        public DateTime? CreatedOn { get; set; }

        /// <summary>
        /// Gets or Sets ModifiedOn
        /// </summary>
        [DataMember(Name="modifiedOn")]
        public DateTime? ModifiedOn { get; set; }

        /// <summary>
        /// Gets or Sets Reason
        /// </summary>
        [DataMember(Name="reason")]
        public string Reason { get; set; }

        /// <summary>
        /// Gets or Sets Activate
        /// </summary>
        [DataMember(Name="activate")]
        public bool? Activate { get; set; }

        /// <summary>
        /// Gets or Sets History
        /// </summary>
        [DataMember(Name="history")]
        public List<CoinBalanceEntry> History { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class CoinBalanceKycProcess {\n");
            sb.Append("  CoinBalanceKycProcessId: ").Append(CoinBalanceKycProcessId).Append("\n");
            sb.Append("  CustomerId: ").Append(CustomerId).Append("\n");
            sb.Append("  ContentId: ").Append(ContentId).Append("\n");
            sb.Append("  BalanceAvailable: ").Append(BalanceAvailable).Append("\n");
            sb.Append("  CreditAmount: ").Append(CreditAmount).Append("\n");
            sb.Append("  DebitAmount: ").Append(DebitAmount).Append("\n");
            sb.Append("  CreatedOn: ").Append(CreatedOn).Append("\n");
            sb.Append("  ModifiedOn: ").Append(ModifiedOn).Append("\n");
            sb.Append("  Reason: ").Append(Reason).Append("\n");
            sb.Append("  Activate: ").Append(Activate).Append("\n");
            sb.Append("  History: ").Append(History).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            if (ReferenceEquals(null, obj)) return false;
            if (ReferenceEquals(this, obj)) return true;
            return obj.GetType() == GetType() && Equals((CoinBalanceKycProcess)obj);
        }

        /// <summary>
        /// Returns true if CoinBalanceKycProcess instances are equal
        /// </summary>
        /// <param name="other">Instance of CoinBalanceKycProcess to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(CoinBalanceKycProcess other)
        {
            if (ReferenceEquals(null, other)) return false;
            if (ReferenceEquals(this, other)) return true;

            return 
                (
                    CoinBalanceKycProcessId == other.CoinBalanceKycProcessId ||
                    CoinBalanceKycProcessId != null &&
                    CoinBalanceKycProcessId.Equals(other.CoinBalanceKycProcessId)
                ) && 
                (
                    CustomerId == other.CustomerId ||
                    CustomerId != null &&
                    CustomerId.Equals(other.CustomerId)
                ) && 
                (
                    ContentId == other.ContentId ||
                    ContentId != null &&
                    ContentId.Equals(other.ContentId)
                ) && 
                (
                    BalanceAvailable == other.BalanceAvailable ||
                    BalanceAvailable != null &&
                    BalanceAvailable.Equals(other.BalanceAvailable)
                ) && 
                (
                    CreditAmount == other.CreditAmount ||
                    CreditAmount != null &&
                    CreditAmount.Equals(other.CreditAmount)
                ) && 
                (
                    DebitAmount == other.DebitAmount ||
                    DebitAmount != null &&
                    DebitAmount.Equals(other.DebitAmount)
                ) && 
                (
                    CreatedOn == other.CreatedOn ||
                    CreatedOn != null &&
                    CreatedOn.Equals(other.CreatedOn)
                ) && 
                (
                    ModifiedOn == other.ModifiedOn ||
                    ModifiedOn != null &&
                    ModifiedOn.Equals(other.ModifiedOn)
                ) && 
                (
                    Reason == other.Reason ||
                    Reason != null &&
                    Reason.Equals(other.Reason)
                ) && 
                (
                    Activate == other.Activate ||
                    Activate != null &&
                    Activate.Equals(other.Activate)
                ) && 
                (
                    History == other.History ||
                    History != null &&
                    History.SequenceEqual(other.History)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                var hashCode = 41;
                // Suitable nullity checks etc, of course :)
                    if (CoinBalanceKycProcessId != null)
                    hashCode = hashCode * 59 + CoinBalanceKycProcessId.GetHashCode();
                    if (CustomerId != null)
                    hashCode = hashCode * 59 + CustomerId.GetHashCode();
                    if (ContentId != null)
                    hashCode = hashCode * 59 + ContentId.GetHashCode();
                    if (BalanceAvailable != null)
                    hashCode = hashCode * 59 + BalanceAvailable.GetHashCode();
                    if (CreditAmount != null)
                    hashCode = hashCode * 59 + CreditAmount.GetHashCode();
                    if (DebitAmount != null)
                    hashCode = hashCode * 59 + DebitAmount.GetHashCode();
                    if (CreatedOn != null)
                    hashCode = hashCode * 59 + CreatedOn.GetHashCode();
                    if (ModifiedOn != null)
                    hashCode = hashCode * 59 + ModifiedOn.GetHashCode();
                    if (Reason != null)
                    hashCode = hashCode * 59 + Reason.GetHashCode();
                    if (Activate != null)
                    hashCode = hashCode * 59 + Activate.GetHashCode();
                    if (History != null)
                    hashCode = hashCode * 59 + History.GetHashCode();
                return hashCode;
            }
        }

        #region Operators
        #pragma warning disable 1591

        public static bool operator ==(CoinBalanceKycProcess left, CoinBalanceKycProcess right)
        {
            return Equals(left, right);
        }

        public static bool operator !=(CoinBalanceKycProcess left, CoinBalanceKycProcess right)
        {
            return !Equals(left, right);
        }

        #pragma warning restore 1591
        #endregion Operators
    }
}
