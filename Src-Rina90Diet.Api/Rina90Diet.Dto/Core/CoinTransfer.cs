/*
 * GlobContent.AdminServer.Api.Web
 *
 * General API for GlobContent stable content
 *
 * OpenAPI spec version: v1
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;

using System.Runtime.Serialization;
using Newtonsoft.Json;

namespace IO.Swagger.Models
{ 
    /// <summary>
    /// 
    /// </summary>
    [DataContract]
    public partial class CoinTransfer : IEquatable<CoinTransfer>
    { 
        /// <summary>
        /// Gets or Sets CustomerIdSource
        /// </summary>
        [DataMember(Name="customerIdSource")]
        public string CustomerIdSource { get; set; }

        /// <summary>
        /// Gets or Sets CustomerIdDestination
        /// </summary>
        [DataMember(Name="customerIdDestination")]
        public string CustomerIdDestination { get; set; }

        /// <summary>
        /// Gets or Sets ContentId
        /// </summary>
        [DataMember(Name="contentId")]
        public string ContentId { get; set; }

        /// <summary>
        /// Gets or Sets CoinValueDebitFromSource
        /// </summary>
        [DataMember(Name="coinValueDebitFromSource")]
        public CoinValue CoinValueDebitFromSource { get; set; }

        /// <summary>
        /// Gets or Sets CoinValueCreditToDestination
        /// </summary>
        [DataMember(Name="coinValueCreditToDestination")]
        public CoinValue CoinValueCreditToDestination { get; set; }

        /// <summary>
        /// Gets or Sets Timestamp
        /// </summary>
        [DataMember(Name="timestamp")]
        public DateTime? Timestamp { get; set; }

        /// <summary>
        /// Gets or Sets Success
        /// </summary>
        [DataMember(Name="success")]
        public bool? Success { get; set; }

        /// <summary>
        /// Gets or Sets Reason
        /// </summary>
        [DataMember(Name="reason")]
        public string Reason { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class CoinTransfer {\n");
            sb.Append("  CustomerIdSource: ").Append(CustomerIdSource).Append("\n");
            sb.Append("  CustomerIdDestination: ").Append(CustomerIdDestination).Append("\n");
            sb.Append("  ContentId: ").Append(ContentId).Append("\n");
            sb.Append("  CoinValueDebitFromSource: ").Append(CoinValueDebitFromSource).Append("\n");
            sb.Append("  CoinValueCreditToDestination: ").Append(CoinValueCreditToDestination).Append("\n");
            sb.Append("  Timestamp: ").Append(Timestamp).Append("\n");
            sb.Append("  Success: ").Append(Success).Append("\n");
            sb.Append("  Reason: ").Append(Reason).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            if (ReferenceEquals(null, obj)) return false;
            if (ReferenceEquals(this, obj)) return true;
            return obj.GetType() == GetType() && Equals((CoinTransfer)obj);
        }

        /// <summary>
        /// Returns true if CoinTransfer instances are equal
        /// </summary>
        /// <param name="other">Instance of CoinTransfer to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(CoinTransfer other)
        {
            if (ReferenceEquals(null, other)) return false;
            if (ReferenceEquals(this, other)) return true;

            return 
                (
                    CustomerIdSource == other.CustomerIdSource ||
                    CustomerIdSource != null &&
                    CustomerIdSource.Equals(other.CustomerIdSource)
                ) && 
                (
                    CustomerIdDestination == other.CustomerIdDestination ||
                    CustomerIdDestination != null &&
                    CustomerIdDestination.Equals(other.CustomerIdDestination)
                ) && 
                (
                    ContentId == other.ContentId ||
                    ContentId != null &&
                    ContentId.Equals(other.ContentId)
                ) && 
                (
                    CoinValueDebitFromSource == other.CoinValueDebitFromSource ||
                    CoinValueDebitFromSource != null &&
                    CoinValueDebitFromSource.Equals(other.CoinValueDebitFromSource)
                ) && 
                (
                    CoinValueCreditToDestination == other.CoinValueCreditToDestination ||
                    CoinValueCreditToDestination != null &&
                    CoinValueCreditToDestination.Equals(other.CoinValueCreditToDestination)
                ) && 
                (
                    Timestamp == other.Timestamp ||
                    Timestamp != null &&
                    Timestamp.Equals(other.Timestamp)
                ) && 
                (
                    Success == other.Success ||
                    Success != null &&
                    Success.Equals(other.Success)
                ) && 
                (
                    Reason == other.Reason ||
                    Reason != null &&
                    Reason.Equals(other.Reason)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                var hashCode = 41;
                // Suitable nullity checks etc, of course :)
                    if (CustomerIdSource != null)
                    hashCode = hashCode * 59 + CustomerIdSource.GetHashCode();
                    if (CustomerIdDestination != null)
                    hashCode = hashCode * 59 + CustomerIdDestination.GetHashCode();
                    if (ContentId != null)
                    hashCode = hashCode * 59 + ContentId.GetHashCode();
                    if (CoinValueDebitFromSource != null)
                    hashCode = hashCode * 59 + CoinValueDebitFromSource.GetHashCode();
                    if (CoinValueCreditToDestination != null)
                    hashCode = hashCode * 59 + CoinValueCreditToDestination.GetHashCode();
                    if (Timestamp != null)
                    hashCode = hashCode * 59 + Timestamp.GetHashCode();
                    if (Success != null)
                    hashCode = hashCode * 59 + Success.GetHashCode();
                    if (Reason != null)
                    hashCode = hashCode * 59 + Reason.GetHashCode();
                return hashCode;
            }
        }

        #region Operators
        #pragma warning disable 1591

        public static bool operator ==(CoinTransfer left, CoinTransfer right)
        {
            return Equals(left, right);
        }

        public static bool operator !=(CoinTransfer left, CoinTransfer right)
        {
            return !Equals(left, right);
        }

        #pragma warning restore 1591
        #endregion Operators
    }
}
