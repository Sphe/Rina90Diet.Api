/*
 * GlobContent.AdminServer.Api.Web
 *
 * General API for GlobContent stable content
 *
 * OpenAPI spec version: v1
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;

using System.Runtime.Serialization;
using Newtonsoft.Json;

namespace IO.Swagger.Models
{ 
    /// <summary>
    /// 
    /// </summary>
    [DataContract]
    public partial class TransactionCreateOrUpdate : IEquatable<TransactionCreateOrUpdate>
    { 
        /// <summary>
        /// Gets or Sets TransactionId
        /// </summary>
        [DataMember(Name="TransactionId")]
        public string TransactionId { get; set; }

        /// <summary>
        /// Gets or Sets TransactionStatusId
        /// </summary>
        [DataMember(Name="TransactionStatusId")]
        public string TransactionStatusId { get; set; }

        /// <summary>
        /// Gets or Sets CustomerId
        /// </summary>
        [DataMember(Name="customerId")]
        public string CustomerId { get; set; }

        /// <summary>
        /// Gets or Sets ContentId
        /// </summary>
        [DataMember(Name="contentId")]
        public string ContentId { get; set; }

        /// <summary>
        /// Gets or Sets TransactionNumber
        /// </summary>
        [DataMember(Name="TransactionNumber")]
        public string TransactionNumber { get; set; }

        /// <summary>
        /// Gets or Sets SubTotal
        /// </summary>
        [DataMember(Name="subTotal")]
        public double? SubTotal { get; set; }

        /// <summary>
        /// Gets or Sets TaxAmount
        /// </summary>
        [DataMember(Name="taxAmount")]
        public double? TaxAmount { get; set; }

        /// <summary>
        /// Gets or Sets GrandTotal
        /// </summary>
        [DataMember(Name="grandTotal")]
        public double? GrandTotal { get; set; }

        /// <summary>
        /// Gets or Sets FinalTotal
        /// </summary>
        [DataMember(Name="finalTotal")]
        public double? FinalTotal { get; set; }

        /// <summary>
        /// Gets or Sets Timestamp
        /// </summary>
        [DataMember(Name="timestamp")]
        public DateTime? Timestamp { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class TransactionCreateOrUpdate {\n");
            sb.Append("  TransactionId: ").Append(TransactionId).Append("\n");
            sb.Append("  TransactionStatusId: ").Append(TransactionStatusId).Append("\n");
            sb.Append("  CustomerId: ").Append(CustomerId).Append("\n");
            sb.Append("  ContentId: ").Append(ContentId).Append("\n");
            sb.Append("  TransactionNumber: ").Append(TransactionNumber).Append("\n");
            sb.Append("  SubTotal: ").Append(SubTotal).Append("\n");
            sb.Append("  TaxAmount: ").Append(TaxAmount).Append("\n");
            sb.Append("  GrandTotal: ").Append(GrandTotal).Append("\n");
            sb.Append("  FinalTotal: ").Append(FinalTotal).Append("\n");
            sb.Append("  Timestamp: ").Append(Timestamp).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            if (ReferenceEquals(null, obj)) return false;
            if (ReferenceEquals(this, obj)) return true;
            return obj.GetType() == GetType() && Equals((TransactionCreateOrUpdate)obj);
        }

        /// <summary>
        /// Returns true if TransactionCreateOrUpdate instances are equal
        /// </summary>
        /// <param name="other">Instance of TransactionCreateOrUpdate to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(TransactionCreateOrUpdate other)
        {
            if (ReferenceEquals(null, other)) return false;
            if (ReferenceEquals(this, other)) return true;

            return 
                (
                    TransactionId == other.TransactionId ||
                    TransactionId != null &&
                    TransactionId.Equals(other.TransactionId)
                ) && 
                (
                    TransactionStatusId == other.TransactionStatusId ||
                    TransactionStatusId != null &&
                    TransactionStatusId.Equals(other.TransactionStatusId)
                ) && 
                (
                    CustomerId == other.CustomerId ||
                    CustomerId != null &&
                    CustomerId.Equals(other.CustomerId)
                ) && 
                (
                    ContentId == other.ContentId ||
                    ContentId != null &&
                    ContentId.Equals(other.ContentId)
                ) && 
                (
                    TransactionNumber == other.TransactionNumber ||
                    TransactionNumber != null &&
                    TransactionNumber.Equals(other.TransactionNumber)
                ) && 
                (
                    SubTotal == other.SubTotal ||
                    SubTotal != null &&
                    SubTotal.Equals(other.SubTotal)
                ) && 
                (
                    TaxAmount == other.TaxAmount ||
                    TaxAmount != null &&
                    TaxAmount.Equals(other.TaxAmount)
                ) && 
                (
                    GrandTotal == other.GrandTotal ||
                    GrandTotal != null &&
                    GrandTotal.Equals(other.GrandTotal)
                ) && 
                (
                    FinalTotal == other.FinalTotal ||
                    FinalTotal != null &&
                    FinalTotal.Equals(other.FinalTotal)
                ) && 
                (
                    Timestamp == other.Timestamp ||
                    Timestamp != null &&
                    Timestamp.Equals(other.Timestamp)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                var hashCode = 41;
                // Suitable nullity checks etc, of course :)
                    if (TransactionId != null)
                    hashCode = hashCode * 59 + TransactionId.GetHashCode();
                    if (TransactionStatusId != null)
                    hashCode = hashCode * 59 + TransactionStatusId.GetHashCode();
                    if (CustomerId != null)
                    hashCode = hashCode * 59 + CustomerId.GetHashCode();
                    if (ContentId != null)
                    hashCode = hashCode * 59 + ContentId.GetHashCode();
                    if (TransactionNumber != null)
                    hashCode = hashCode * 59 + TransactionNumber.GetHashCode();
                    if (SubTotal != null)
                    hashCode = hashCode * 59 + SubTotal.GetHashCode();
                    if (TaxAmount != null)
                    hashCode = hashCode * 59 + TaxAmount.GetHashCode();
                    if (GrandTotal != null)
                    hashCode = hashCode * 59 + GrandTotal.GetHashCode();
                    if (FinalTotal != null)
                    hashCode = hashCode * 59 + FinalTotal.GetHashCode();
                    if (Timestamp != null)
                    hashCode = hashCode * 59 + Timestamp.GetHashCode();
                return hashCode;
            }
        }

        #region Operators
        #pragma warning disable 1591

        public static bool operator ==(TransactionCreateOrUpdate left, TransactionCreateOrUpdate right)
        {
            return Equals(left, right);
        }

        public static bool operator !=(TransactionCreateOrUpdate left, TransactionCreateOrUpdate right)
        {
            return !Equals(left, right);
        }

        #pragma warning restore 1591
        #endregion Operators
    }
}
