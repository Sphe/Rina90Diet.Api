/*
 * GlobContent.AdminServer.Api.Web
 *
 * General API for GlobContent stable content
 *
 * OpenAPI spec version: v1
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;

using System.Runtime.Serialization;
using Newtonsoft.Json;

namespace IO.Swagger.Models
{ 
    /// <summary>
    /// 
    /// </summary>
    [DataContract]
    public partial class CoinExchange : IEquatable<CoinExchange>
    { 
        /// <summary>
        /// Gets or Sets CoinSource
        /// </summary>
        [DataMember(Name="coinSource")]
        public CoinValue CoinSource { get; set; }

        /// <summary>
        /// Gets or Sets CoinDestination
        /// </summary>
        [DataMember(Name="coinDestination")]
        public CoinValue CoinDestination { get; set; }

        /// <summary>
        /// Gets or Sets Timestamp
        /// </summary>
        [DataMember(Name="timestamp")]
        public DateTime? Timestamp { get; set; }

        /// <summary>
        /// Gets or Sets Success
        /// </summary>
        [DataMember(Name="success")]
        public bool? Success { get; set; }

        /// <summary>
        /// Gets or Sets Reason
        /// </summary>
        [DataMember(Name="reason")]
        public string Reason { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class CoinExchange {\n");
            sb.Append("  CoinSource: ").Append(CoinSource).Append("\n");
            sb.Append("  CoinDestination: ").Append(CoinDestination).Append("\n");
            sb.Append("  Timestamp: ").Append(Timestamp).Append("\n");
            sb.Append("  Success: ").Append(Success).Append("\n");
            sb.Append("  Reason: ").Append(Reason).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            if (ReferenceEquals(null, obj)) return false;
            if (ReferenceEquals(this, obj)) return true;
            return obj.GetType() == GetType() && Equals((CoinExchange)obj);
        }

        /// <summary>
        /// Returns true if CoinExchange instances are equal
        /// </summary>
        /// <param name="other">Instance of CoinExchange to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(CoinExchange other)
        {
            if (ReferenceEquals(null, other)) return false;
            if (ReferenceEquals(this, other)) return true;

            return 
                (
                    CoinSource == other.CoinSource ||
                    CoinSource != null &&
                    CoinSource.Equals(other.CoinSource)
                ) && 
                (
                    CoinDestination == other.CoinDestination ||
                    CoinDestination != null &&
                    CoinDestination.Equals(other.CoinDestination)
                ) && 
                (
                    Timestamp == other.Timestamp ||
                    Timestamp != null &&
                    Timestamp.Equals(other.Timestamp)
                ) && 
                (
                    Success == other.Success ||
                    Success != null &&
                    Success.Equals(other.Success)
                ) && 
                (
                    Reason == other.Reason ||
                    Reason != null &&
                    Reason.Equals(other.Reason)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                var hashCode = 41;
                // Suitable nullity checks etc, of course :)
                    if (CoinSource != null)
                    hashCode = hashCode * 59 + CoinSource.GetHashCode();
                    if (CoinDestination != null)
                    hashCode = hashCode * 59 + CoinDestination.GetHashCode();
                    if (Timestamp != null)
                    hashCode = hashCode * 59 + Timestamp.GetHashCode();
                    if (Success != null)
                    hashCode = hashCode * 59 + Success.GetHashCode();
                    if (Reason != null)
                    hashCode = hashCode * 59 + Reason.GetHashCode();
                return hashCode;
            }
        }

        #region Operators
        #pragma warning disable 1591

        public static bool operator ==(CoinExchange left, CoinExchange right)
        {
            return Equals(left, right);
        }

        public static bool operator !=(CoinExchange left, CoinExchange right)
        {
            return !Equals(left, right);
        }

        #pragma warning restore 1591
        #endregion Operators
    }
}
