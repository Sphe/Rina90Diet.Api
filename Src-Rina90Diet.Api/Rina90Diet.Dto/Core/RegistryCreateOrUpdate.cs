/*
 * GlobContent.AdminServer.Api.Web
 *
 * General API for GlobContent stable content
 *
 * OpenAPI spec version: v1
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;

using System.Runtime.Serialization;
using Newtonsoft.Json;

namespace IO.Swagger.Models
{ 
    /// <summary>
    /// 
    /// </summary>
    [DataContract]
    public partial class RegistryCreateOrUpdate : IEquatable<RegistryCreateOrUpdate>
    { 
        /// <summary>
        /// Gets or Sets RegistryGenericAttributeId
        /// </summary>
        [DataMember(Name="registryGenericAttributeId")]
        public string RegistryGenericAttributeId { get; set; }

        /// <summary>
        /// Gets or Sets KycprocessId
        /// </summary>
        [DataMember(Name="kycprocessId")]
        public string KycprocessId { get; set; }

        /// <summary>
        /// Gets or Sets GenericAttributeId
        /// </summary>
        [DataMember(Name="genericAttributeId")]
        public string GenericAttributeId { get; set; }

        /// <summary>
        /// Gets or Sets Name
        /// </summary>
        [DataMember(Name="name")]
        public string Name { get; set; }

        /// <summary>
        /// Gets or Sets Timestamp
        /// </summary>
        [DataMember(Name="timestamp")]
        public DateTime? Timestamp { get; set; }

        /// <summary>
        /// Gets or Sets KeyValue
        /// </summary>
        [DataMember(Name="keyValue")]
        public string KeyValue { get; set; }

        /// <summary>
        /// Gets or Sets ItemValue
        /// </summary>
        [DataMember(Name="itemValue")]
        public Object ItemValue { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class RegistryCreateOrUpdate {\n");
            sb.Append("  RegistryGenericAttributeId: ").Append(RegistryGenericAttributeId).Append("\n");
            sb.Append("  KycprocessId: ").Append(KycprocessId).Append("\n");
            sb.Append("  GenericAttributeId: ").Append(GenericAttributeId).Append("\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  Timestamp: ").Append(Timestamp).Append("\n");
            sb.Append("  KeyValue: ").Append(KeyValue).Append("\n");
            sb.Append("  ItemValue: ").Append(ItemValue).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            if (ReferenceEquals(null, obj)) return false;
            if (ReferenceEquals(this, obj)) return true;
            return obj.GetType() == GetType() && Equals((RegistryCreateOrUpdate)obj);
        }

        /// <summary>
        /// Returns true if RegistryCreateOrUpdate instances are equal
        /// </summary>
        /// <param name="other">Instance of RegistryCreateOrUpdate to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(RegistryCreateOrUpdate other)
        {
            if (ReferenceEquals(null, other)) return false;
            if (ReferenceEquals(this, other)) return true;

            return 
                (
                    RegistryGenericAttributeId == other.RegistryGenericAttributeId ||
                    RegistryGenericAttributeId != null &&
                    RegistryGenericAttributeId.Equals(other.RegistryGenericAttributeId)
                ) && 
                (
                    KycprocessId == other.KycprocessId ||
                    KycprocessId != null &&
                    KycprocessId.Equals(other.KycprocessId)
                ) && 
                (
                    GenericAttributeId == other.GenericAttributeId ||
                    GenericAttributeId != null &&
                    GenericAttributeId.Equals(other.GenericAttributeId)
                ) && 
                (
                    Name == other.Name ||
                    Name != null &&
                    Name.Equals(other.Name)
                ) && 
                (
                    Timestamp == other.Timestamp ||
                    Timestamp != null &&
                    Timestamp.Equals(other.Timestamp)
                ) && 
                (
                    KeyValue == other.KeyValue ||
                    KeyValue != null &&
                    KeyValue.Equals(other.KeyValue)
                ) && 
                (
                    ItemValue == other.ItemValue ||
                    ItemValue != null &&
                    ItemValue.Equals(other.ItemValue)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                var hashCode = 41;
                // Suitable nullity checks etc, of course :)
                    if (RegistryGenericAttributeId != null)
                    hashCode = hashCode * 59 + RegistryGenericAttributeId.GetHashCode();
                    if (KycprocessId != null)
                    hashCode = hashCode * 59 + KycprocessId.GetHashCode();
                    if (GenericAttributeId != null)
                    hashCode = hashCode * 59 + GenericAttributeId.GetHashCode();
                    if (Name != null)
                    hashCode = hashCode * 59 + Name.GetHashCode();
                    if (Timestamp != null)
                    hashCode = hashCode * 59 + Timestamp.GetHashCode();
                    if (KeyValue != null)
                    hashCode = hashCode * 59 + KeyValue.GetHashCode();
                    if (ItemValue != null)
                    hashCode = hashCode * 59 + ItemValue.GetHashCode();
                return hashCode;
            }
        }

        #region Operators
        #pragma warning disable 1591

        public static bool operator ==(RegistryCreateOrUpdate left, RegistryCreateOrUpdate right)
        {
            return Equals(left, right);
        }

        public static bool operator !=(RegistryCreateOrUpdate left, RegistryCreateOrUpdate right)
        {
            return !Equals(left, right);
        }

        #pragma warning restore 1591
        #endregion Operators
    }
}
