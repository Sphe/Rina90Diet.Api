/*
 * GlobContent.AdminServer.Api.Web
 *
 * General API for GlobContent stable content
 *
 * OpenAPI spec version: v1
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;

using System.Runtime.Serialization;
using Newtonsoft.Json;

namespace IO.Swagger.Models
{ 
    /// <summary>
    /// 
    /// </summary>
    [DataContract]
    public partial class WorkflowCreateOrUpdate : IEquatable<WorkflowCreateOrUpdate>
    { 
        /// <summary>
        /// Gets or Sets WorkflowId
        /// </summary>
        [DataMember(Name="workflowId")]
        public string WorkflowId { get; set; }

        /// <summary>
        /// Gets or Sets WorkflowTypeId
        /// </summary>
        [DataMember(Name="workflowTypeId")]
        public string WorkflowTypeId { get; set; }

        /// <summary>
        /// Gets or Sets CategoryId
        /// </summary>
        [DataMember(Name="categoryId")]
        public string CategoryId { get; set; }

        /// <summary>
        /// Gets or Sets CultureId
        /// </summary>
        [DataMember(Name="cultureId")]
        public string CultureId { get; set; }

        /// <summary>
        /// Gets or Sets Name
        /// </summary>
        [DataMember(Name="name")]
        public string Name { get; set; }

        /// <summary>
        /// Gets or Sets Description
        /// </summary>
        [DataMember(Name="description")]
        public string Description { get; set; }

        /// <summary>
        /// Gets or Sets Body
        /// </summary>
        [DataMember(Name="body")]
        public string Body { get; set; }

        /// <summary>
        /// Gets or Sets IsComponent
        /// </summary>
        [DataMember(Name="isComponent")]
        public bool? IsComponent { get; set; }

        /// <summary>
        /// Gets or Sets IsEntryCoin
        /// </summary>
        [DataMember(Name="isEntryCoin")]
        public bool? IsEntryCoin { get; set; }

        /// <summary>
        /// Gets or Sets HasArguments
        /// </summary>
        [DataMember(Name="hasArguments")]
        public bool? HasArguments { get; set; }

        /// <summary>
        /// Gets or Sets Arguments
        /// </summary>
        [DataMember(Name="arguments")]
        public Dictionary<string, Object> Arguments { get; set; }

        /// <summary>
        /// Gets or Sets TimeStamp
        /// </summary>
        [DataMember(Name="timeStamp")]
        public DateTime? TimeStamp { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class WorkflowCreateOrUpdate {\n");
            sb.Append("  WorkflowId: ").Append(WorkflowId).Append("\n");
            sb.Append("  WorkflowTypeId: ").Append(WorkflowTypeId).Append("\n");
            sb.Append("  CategoryId: ").Append(CategoryId).Append("\n");
            sb.Append("  CultureId: ").Append(CultureId).Append("\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  Description: ").Append(Description).Append("\n");
            sb.Append("  Body: ").Append(Body).Append("\n");
            sb.Append("  IsComponent: ").Append(IsComponent).Append("\n");
            sb.Append("  IsEntryCoin: ").Append(IsEntryCoin).Append("\n");
            sb.Append("  HasArguments: ").Append(HasArguments).Append("\n");
            sb.Append("  Arguments: ").Append(Arguments).Append("\n");
            sb.Append("  TimeStamp: ").Append(TimeStamp).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            if (ReferenceEquals(null, obj)) return false;
            if (ReferenceEquals(this, obj)) return true;
            return obj.GetType() == GetType() && Equals((WorkflowCreateOrUpdate)obj);
        }

        /// <summary>
        /// Returns true if WorkflowCreateOrUpdate instances are equal
        /// </summary>
        /// <param name="other">Instance of WorkflowCreateOrUpdate to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(WorkflowCreateOrUpdate other)
        {
            if (ReferenceEquals(null, other)) return false;
            if (ReferenceEquals(this, other)) return true;

            return 
                (
                    WorkflowId == other.WorkflowId ||
                    WorkflowId != null &&
                    WorkflowId.Equals(other.WorkflowId)
                ) && 
                (
                    WorkflowTypeId == other.WorkflowTypeId ||
                    WorkflowTypeId != null &&
                    WorkflowTypeId.Equals(other.WorkflowTypeId)
                ) && 
                (
                    CategoryId == other.CategoryId ||
                    CategoryId != null &&
                    CategoryId.Equals(other.CategoryId)
                ) && 
                (
                    CultureId == other.CultureId ||
                    CultureId != null &&
                    CultureId.Equals(other.CultureId)
                ) && 
                (
                    Name == other.Name ||
                    Name != null &&
                    Name.Equals(other.Name)
                ) && 
                (
                    Description == other.Description ||
                    Description != null &&
                    Description.Equals(other.Description)
                ) && 
                (
                    Body == other.Body ||
                    Body != null &&
                    Body.Equals(other.Body)
                ) && 
                (
                    IsComponent == other.IsComponent ||
                    IsComponent != null &&
                    IsComponent.Equals(other.IsComponent)
                ) && 
                (
                    IsEntryCoin == other.IsEntryCoin ||
                    IsEntryCoin != null &&
                    IsEntryCoin.Equals(other.IsEntryCoin)
                ) && 
                (
                    HasArguments == other.HasArguments ||
                    HasArguments != null &&
                    HasArguments.Equals(other.HasArguments)
                ) && 
                (
                    Arguments == other.Arguments ||
                    Arguments != null &&
                    Arguments.SequenceEqual(other.Arguments)
                ) && 
                (
                    TimeStamp == other.TimeStamp ||
                    TimeStamp != null &&
                    TimeStamp.Equals(other.TimeStamp)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                var hashCode = 41;
                // Suitable nullity checks etc, of course :)
                    if (WorkflowId != null)
                    hashCode = hashCode * 59 + WorkflowId.GetHashCode();
                    if (WorkflowTypeId != null)
                    hashCode = hashCode * 59 + WorkflowTypeId.GetHashCode();
                    if (CategoryId != null)
                    hashCode = hashCode * 59 + CategoryId.GetHashCode();
                    if (CultureId != null)
                    hashCode = hashCode * 59 + CultureId.GetHashCode();
                    if (Name != null)
                    hashCode = hashCode * 59 + Name.GetHashCode();
                    if (Description != null)
                    hashCode = hashCode * 59 + Description.GetHashCode();
                    if (Body != null)
                    hashCode = hashCode * 59 + Body.GetHashCode();
                    if (IsComponent != null)
                    hashCode = hashCode * 59 + IsComponent.GetHashCode();
                    if (IsEntryCoin != null)
                    hashCode = hashCode * 59 + IsEntryCoin.GetHashCode();
                    if (HasArguments != null)
                    hashCode = hashCode * 59 + HasArguments.GetHashCode();
                    if (Arguments != null)
                    hashCode = hashCode * 59 + Arguments.GetHashCode();
                    if (TimeStamp != null)
                    hashCode = hashCode * 59 + TimeStamp.GetHashCode();
                return hashCode;
            }
        }

        #region Operators
        #pragma warning disable 1591

        public static bool operator ==(WorkflowCreateOrUpdate left, WorkflowCreateOrUpdate right)
        {
            return Equals(left, right);
        }

        public static bool operator !=(WorkflowCreateOrUpdate left, WorkflowCreateOrUpdate right)
        {
            return !Equals(left, right);
        }

        #pragma warning restore 1591
        #endregion Operators
    }
}
